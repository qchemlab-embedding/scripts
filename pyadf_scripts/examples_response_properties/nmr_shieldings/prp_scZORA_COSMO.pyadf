#
# This example shows how to calculate the NMR shielding tensor in ADF via pyadf.
# It demonstrates:
# * how to calculate NMR shieldings with solvent modeled with COSMO
#
# last. rev. Gosia Olejniczak, 13/05/2024
#


import shutil
import time

from pyadf import *
if 'pyadfenv' not in globals():
    from pyadf.Initialization import *


##########################################################
# functions grepping key ADF results
##########################################################

def calculate_nmr_shieldings(molecule, results, active_atoms=None, active_labels=None, active_coords=None, label=None, ghost_coords=None, ghost_labels=None, print_to_output=False):

    print( " # " )
    print( " # Output from calculate_nmr_shieldings:" )
    if label:
        print( " # ", label )
    print( " # " )

    if ghost_coords is None:
        nmr_results = adfnmrjob(results, active_atoms, out='all', use='FXC', calc='all', u1k='best').run()
    else:
        # remember to add ghosts in SCF step (as ghosts to a system or as pointcharges)
        nmr_results = adfnmrjob(results, active_atoms, ghosts=ghost_coords, out='all', use='FXC', calc='all', u1k='best').run()

    results_tot_iso  = {}
    results_tot_aniso  = {}

    if active_atoms is not None:
        for a in range(len(active_atoms)):
            ax = str(active_coords[a][0])
            ay = str(active_coords[a][1])
            az = str(active_coords[a][2])
            coords = ax+", "+ay+", "+az
            tot_iso,tot_aniso = nmr_results.get_shielding(nuc=active_atoms[a])

            if print_to_output:
                print( "NMR results for an active atom: ", active_atoms[a], " at coords: "+coords+"\n" )
                print( "@@ Shielding_iso_total "+active_labels[a]+"("+label+") :", tot_iso )
                print( "@@ Shielding_aniso_total "+active_labels[a]+"("+label+") :", tot_aniso )
                print( "\n" )

            results_tot_iso[coords] = tot_iso
            results_tot_aniso[coords] = tot_aniso

    if ghost_coords is not None:
        for g in range(len(ghost_coords)):
            cx = str(ghost_coords[g][0])
            cy = str(ghost_coords[g][1])
            cz = str(ghost_coords[g][2])
            coords = cx+", "+cy+", "+cz
            tot_iso,tot_aniso = nmr_results.get_shielding(ghost=g+1)

            if print_to_output:
                print( "NMR results at ghost coords: "+coords+"\n" )
                print( "## Shielding_iso_total "+ghost_labels[g]+"("+label+") :", tot_iso )
                print( "## Shielding_aniso_total "+ghost_labels[g]+"("+label+") :", tot_aniso )
                print( "\n" )

            results_tot_iso[coords] = tot_iso
            results_tot_aniso[coords] = tot_aniso

    print( " # -- end of calculate_nmr_shieldings -- #" )
    return results_tot_iso, results_tot_aniso




##########################################################
# the work starts here
##########################################################

# ----------------------
# setup - molecular data
# ----------------------

geometries_dir = pyadfenv.outdir
file_mol  = os.path.join(geometries_dir, 'an.xyz')
file_h2o  = os.path.join(geometries_dir, 'solvent0.xyz')
file_env1 = os.path.join(geometries_dir, 'solvent1.xyz')
file_env2 = os.path.join(geometries_dir, 'solvent2.xyz')
file_env3 = os.path.join(geometries_dir, 'solvent3.xyz')
m_mol  = molecule(file_mol)
m_h2o  = molecule(file_h2o)
m_env1 = molecule(file_env1)
m_env2 = molecule(file_env2)
m_env3 = molecule(file_env3)
# you can "group" molecules into subsystems, for instance:
# * group "m_envX" molecules into "m_env":
m_e = []
for i in range(1,4):
    m = molecule(os.path.join(geometries_dir, f'solvent{i:d}.xyz'))
    m_e.append(m)
m_env = sum(m_e)
# * and entire supermolecule:
m_tot = m_mol + m_h2o + m_env1 + m_env2 + m_env3
# * and entire solvent:
m_allenv = m_h2o + m_env1 + m_env2 + m_env3

# if a system is charged, then remember to set it up 
#charge_mol=0
#m_mol.set_charge(charge_mol)
#m_tot.set_charge(charge_mol)

# ask the program not to identify molecular symmetry
m_mol.set_symmetry('NOSYM')
m_h2o.set_symmetry('NOSYM')
m_env1.set_symmetry('NOSYM')
m_env2.set_symmetry('NOSYM')
m_env3.set_symmetry('NOSYM')
m_env.set_symmetry('NOSYM')
m_allenv.set_symmetry('NOSYM')
m_tot.set_symmetry('NOSYM')

print('Coordinates of all (sub)systems:')
print('mol:')
print(m_mol.print_coordinates())
print('h2o:')
print(m_h2o.print_coordinates())
print('env1:')
print(m_env1.print_coordinates())
print('env2:')
print(m_env2.print_coordinates())
print('env3:')
print(m_env3.print_coordinates())
print('entire environment:')
print((m_allenv).print_coordinates())
print('entire system:')
print(m_tot.print_coordinates())


# ------------------------------------------------------------------------------------------------
# setup - general settings for ADF job
#
# - adapt these as needed;
# - search in pyadf code to find out what they mean 
# - setup related to ADF-NMR job is done in calculate_nmr_shieldings function
# ------------------------------------------------------------------------------------------------

settings = adfsettings()

settings.set_ZORA(ZORA=True, SpinOrbit=False)
settings.set_unrestricted(False)
settings.set_functional('PBE')                 # choose DFT functional
basis_set = "DZP"                              # choose the basis set

# these settings can be left as they are:
settings.ncycles=1000                     
settings.set_integration(accint=8.0, acclist=[8.0, 8.0])
settings.set_dependency(True)
settings.set_exactdensity(True)
settings.set_save_tapes([21,10,41])
settings.set_occupations(['KEEPORBITALS '+str(settings.ncycles)])
gen_sym_opts = ['NOSYM', 'NOSYMFIT', 'NUCLEARMODEL gaussian']

settings.set_cosmo('Water')


# ------------------------------------------------------------------------------------------------
# setup - selection of the NMR centers:
#     here, you can select nuclei for which the NMR shielding is calculated
#       * it can reduce the computational time, otherwise the code does calculations on all nuclei
#       * the numbering order of atoms:
#          * it should be given in "input order" (=as in your xyz files)
#          * atom numbering starts from 1
# ------------------------------------------------------------------------------------------------

# select nuclei in an active subsystem
# here - we select C and N
active_nmr_atoms_index = [1,2]
active_nmr_atoms_label = ["C","N"]
active_nmr_atoms_coords= []
for i in active_nmr_atoms_index:
    active_nmr_atoms_coords.append(m_mol.get_coordinates()[i-1])

# select nuclei in an environment;
# here - we select H in "m_h2o" engaged in a hydrogen bonding with N in "m_mol"
h2o_nmr_atoms_index = [3]
h2o_nmr_atoms_label = ["Hb"]
h2o_nmr_atoms_coords= []
for i in h2o_nmr_atoms_index:
    h2o_nmr_atoms_coords.append(m_h2o.get_coordinates()[i-1])
# we have no interest in nuclei of env, so we leave these empty:
env_nmr_atoms_index = []
env_nmr_atoms_label = []
env_nmr_atoms_coords= []
for i in env_nmr_atoms_index:
    env_nmr_atoms_coords.append(m_env.get_coordinates()[i-1])

# in a supermolecule, these nuclei have indices 1,2,9
# as in this example, we construct "m_tot" as (in order) "m_mol" (first) + "m_h2o" (second) + "m_env1" (third) ... 
super_nmr_atoms_index = [1,2,9]
super_nmr_atoms_label = ["C", "N", "Hb"]
super_nmr_atoms_coords= []
for i in super_nmr_atoms_index:
    super_nmr_atoms_coords.append(m_tot.get_coordinates()[i-1])


# ---------------------------------------------------------------------------------------------------------------------
# now,  we demonstrate how to calculate the NMR shielding of the selected nuclei in an entire system:
# ---------------------------------------------------------------------------------------------------------------------

r_tot  = adfsinglepointjob(m_tot,  basis_set, settings=settings, options=gen_sym_opts).run()
agrid = adfgrid(r_tot)

results_tot_iso_super, results_tot_aniso_super \
= calculate_nmr_shieldings(m_tot, r_tot, active_atoms=super_nmr_atoms_index,  active_labels=super_nmr_atoms_label, active_coords=super_nmr_atoms_coords, label="supermolecule", print_to_output=True)

for i, ind in enumerate(super_nmr_atoms_index):

    nuc = super_nmr_atoms_label[i]
    coords = m_tot.get_coordinates()[ind-1]
    x = str(coords[0])
    y = str(coords[1])
    z = str(coords[2])
    k = x+", "+y+", "+z

    r1 = results_tot_iso_super[k]
    r2 = results_tot_aniso_super[k]
    print("The isotropic shielding of nucleus {} placed at {} from calculations in water (modeled with COSMO) is {:.3f}".format(nuc,k,r1))
    print("The anisotropic shielding of nucleus {} placed at {} from calculations in water (modeled with COSMO) {:.3f}".format(nuc,k,r2))


