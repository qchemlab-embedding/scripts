#
# This example shows how to calculate the NMR shielding tensor in ADF via pyadf.
# It demonstrates:
# * how to play with different partitioning schemes (selection of subsystems)
# * how to calculate NMR with FDE and freeze-and-thaw cycles ("FnT")
#
# Note that in "real" examples, you might need to split this script into few
# so that you have enough CPU for each task
#
#
# last. rev. Gosia Olejniczak, 29/04/2024
#


import shutil
import time

from pyadf import *
if 'pyadfenv' not in globals():
    from pyadf.Initialization import *


##########################################################
# functions grepping key ADF results
##########################################################

def calculate_nmr_shieldings(molecule, results, active_atoms=None, active_labels=None, active_coords=None, label=None, ghost_coords=None, ghost_labels=None, print_to_output=False):

    print( " # " )
    print( " # Output from calculate_nmr_shieldings:" )
    if label:
        print( " # ", label )
    print( " # " )

    if ghost_coords is None:
        nmr_results = adfnmrjob(results, active_atoms, out='all', use='FXC', calc='all', u1k='best').run()
    else:
        # remember to add ghosts in SCF step (as ghosts to a system or as pointcharges)
        nmr_results = adfnmrjob(results, active_atoms, ghosts=ghost_coords, out='all', use='FXC', calc='all', u1k='best').run()

    results_tot_iso  = {}
    results_tot_aniso  = {}

    if active_atoms is not None:
        for a in range(len(active_atoms)):
            ax = str(active_coords[a][0])
            ay = str(active_coords[a][1])
            az = str(active_coords[a][2])
            coords = ax+", "+ay+", "+az
            tot_iso,tot_aniso = nmr_results.get_shielding(nuc=active_atoms[a])

            if print_to_output:
                print( "NMR results for an active atom: ", active_atoms[a], " at coords: "+coords+"\n" )
                print( "@@ Shielding_iso_total "+active_labels[a]+"("+label+") :", tot_iso )
                print( "@@ Shielding_aniso_total "+active_labels[a]+"("+label+") :", tot_aniso )
                print( "\n" )

            results_tot_iso[coords] = tot_iso
            results_tot_aniso[coords] = tot_aniso

    if ghost_coords is not None:
        for g in range(len(ghost_coords)):
            cx = str(ghost_coords[g][0])
            cy = str(ghost_coords[g][1])
            cz = str(ghost_coords[g][2])
            coords = cx+", "+cy+", "+cz
            tot_iso,tot_aniso = nmr_results.get_shielding(ghost=g+1)

            if print_to_output:
                print( "NMR results at ghost coords: "+coords+"\n" )
                print( "## Shielding_iso_total "+ghost_labels[g]+"("+label+") :", tot_iso )
                print( "## Shielding_aniso_total "+ghost_labels[g]+"("+label+") :", tot_aniso )
                print( "\n" )

            results_tot_iso[coords] = tot_iso
            results_tot_aniso[coords] = tot_aniso

    print( " # -- end of calculate_nmr_shieldings -- #" )
    return results_tot_iso, results_tot_aniso




##########################################################
# the work starts here
##########################################################

# ----------------------
# setup - molecular data
# ----------------------

geometries_dir = pyadfenv.outdir
file_mol  = os.path.join(geometries_dir, 'an.xyz')
file_h2o  = os.path.join(geometries_dir, 'solvent0.xyz')
file_env1 = os.path.join(geometries_dir, 'solvent1.xyz')
file_env2 = os.path.join(geometries_dir, 'solvent2.xyz')
file_env3 = os.path.join(geometries_dir, 'solvent3.xyz')
m_mol  = molecule(file_mol)
m_h2o  = molecule(file_h2o)
m_env1 = molecule(file_env1)
m_env2 = molecule(file_env2)
m_env3 = molecule(file_env3)
# you can "group" molecules into subsystems, for instance:
# * group "m_envX" molecules into "m_env":
m_e = []
for i in range(1,4):
    m = molecule(os.path.join(geometries_dir, f'solvent{i:d}.xyz'))
    m_e.append(m)
m_env = sum(m_e)
# * and entire supermolecule:
m_tot = m_mol + m_h2o + m_env1 + m_env2 + m_env3
# * and entire solvent:
m_allenv = m_h2o + m_env1 + m_env2 + m_env3

# if a system is charged, then remember to set it up 
#charge_mol=0
#m_mol.set_charge(charge_mol)
#m_tot.set_charge(charge_mol)

# ask the program not to identify molecular symmetry
m_mol.set_symmetry('NOSYM')
m_h2o.set_symmetry('NOSYM')
m_env1.set_symmetry('NOSYM')
m_env2.set_symmetry('NOSYM')
m_env3.set_symmetry('NOSYM')
m_env.set_symmetry('NOSYM')
m_allenv.set_symmetry('NOSYM')
m_tot.set_symmetry('NOSYM')

print('Coordinates of all (sub)systems:')
print('mol:')
print(m_mol.print_coordinates())
print('h2o:')
print(m_h2o.print_coordinates())
print('env1:')
print(m_env1.print_coordinates())
print('env2:')
print(m_env2.print_coordinates())
print('env3:')
print(m_env3.print_coordinates())
print('entire environment:')
print((m_allenv).print_coordinates())
print('entire system:')
print(m_tot.print_coordinates())


# ------------------------------------------------------------------------------------------------
# setup - general settings for ADF job
#
# - adapt these as needed;
# - search in pyadf code to find out what they mean 
# - setup related to ADF-NMR job is done in calculate_nmr_shieldings function
# ------------------------------------------------------------------------------------------------

settings = adfsettings()

settings.set_ZORA(ZORA=True, SpinOrbit=True)
settings.set_unrestricted(False)
settings.set_noncollinear(True)
settings.set_functional('PBE')                 # choose DFT functional
basis_set = "DZP"                              # choose the basis set

# these settings can be left as they are:
settings.ncycles=1000                     
settings.set_integration(accint=8.0, acclist=[8.0, 8.0])
settings.set_dependency(True)
settings.set_exactdensity(True)
settings.set_save_tapes([21,10,41])
settings.set_occupations(['KEEPORBITALS '+str(settings.ncycles)])
gen_sym_opts = ['NOSYM', 'NOSYMFIT', 'NUCLEARMODEL gaussian']

# general settings for FDE - adapt as needed
fde_nadd_kin = 'PW91K'    # choose the potential for the non-additive kinetic part of interaction energy
max_fnt_cycles = 10       # choose the maximum number of freeze-and-thaw cycles
save_potentials_densities = False

fde_exc_opts = ['QTENS', 'ALLOW POSHOMO']
gen_fde_opts = gen_sym_opts + fde_exc_opts

fde_act_opts = {'FULLGRID':'', 'TNAD':fde_nadd_kin, 'ENERGY':''}
fde_frz_opts = {}

fnt_act_opts = {'FULLGRID':'', 'TNAD':fde_nadd_kin, 'ENERGY':'', 'RELAXCYCLES': max_fnt_cycles }
fnt_frz_opts = {"RELAX":""}

basis_act = basis_set
basis_frz = basis_set

# ------------------------------------------------------------------------------------------------
# setup - selection of the NMR centers:
#     here, you can select nuclei for which the NMR shielding is calculated
#       * it can reduce the computational time, otherwise the code does calculations on all nuclei
#       * the numbering order of atoms:
#          * it should be given in "input order" (=as in your xyz files)
#          * atom numbering starts from 1
# ------------------------------------------------------------------------------------------------

# select nuclei in an active subsystem
# here - we select C and N
active_nmr_atoms_index = [1,2]
active_nmr_atoms_label = ["C","N"]
active_nmr_atoms_coords= []
for i in active_nmr_atoms_index:
    active_nmr_atoms_coords.append(m_mol.get_coordinates()[i-1])

# select nuclei in an environment;
# here - we select H in "m_h2o" engaged in a hydrogen bonding with N in "m_mol"
h2o_nmr_atoms_index = [3]
h2o_nmr_atoms_label = ["Hb"]
h2o_nmr_atoms_coords= []
for i in h2o_nmr_atoms_index:
    h2o_nmr_atoms_coords.append(m_h2o.get_coordinates()[i-1])
# we have no interest in nuclei of env, so we leave these empty:
env_nmr_atoms_index = []
env_nmr_atoms_label = []
env_nmr_atoms_coords= []
for i in env_nmr_atoms_index:
    env_nmr_atoms_coords.append(m_env.get_coordinates()[i-1])

# in a supermolecule, these nuclei have indices 1,2,9
# as in this example, we construct "m_tot" as (in order) "m_mol" (first) + "m_h2o" (second) + "m_env1" (third) ... 
super_nmr_atoms_index = [1,2,9]
super_nmr_atoms_label = ["C", "N", "Hb"]
super_nmr_atoms_coords= []
for i in super_nmr_atoms_index:
    super_nmr_atoms_coords.append(m_tot.get_coordinates()[i-1])


# ---------------------------------------------------------------------------------------------------------------------
# now,  we demonstrate how to calculate the NMR shielding of the selected nuclei in an entire system:
#
# - by running calculations on the entire system explicitly ("supermolecular" calculations) -> see (1) below
#
# - by running calculations on isolated subsystems and using the results to approximate this "explicit" value
#   - in this case, we use the geometries of the "isolated" subsystems as cut out from the supermolecule
#   - we do not add FDE contributions
#   - here, we can play with different paritioning schemes, but in this tutorial we focus on: 
#     * m_tot = m_sub1 + m_sub2
#     * sub1 = m_mol  -> calculations in (2) below
#     * sub2 = (m_h2o + m_env) -> calculations in (3) below
#
# theory recap: let's assume that we basically have:
#
#       m_tot = m_mol + m_h2o + m_env
#
#       then, if we are interested in evaluating the NMR shielding of a nucleus X ("sX") in an entire system,
#       we should take into account the contributions from all the subsystems:
#
#       sX(in "m_tot") = sX(in "m_mol") + sX(in "m_h2o") + sX(in "m_env")
#
#       of course, X belongs to only one of "m_mol", "m_h2o" , "m_env";
#       then, the question is how to evaluate sX(in "Y") if "X" does not belong to "Y" (e.g., here: N does not belong to "m_h2o");
#       one possibility is to evaluate sX(in "Y") in a "NICS-way":
#       e.g., to evaluate the contribution to sN from "m_h2o", we apply the magnetic field perturbation to "m_h2o"
#       and probe it with the magnetic dipole of N; in practice, this is done by running NMR job on "m_h2o" with ghost
#       centers placed in N 
#
#       Another issue is that composing the results in a "supermolecular approach" raises concerns about "BSSE"-type errors.
#       To address such issues, in each calculation, we consider two approaches: with and without other subsystems present as "ghosts";
#
# ---------------------------------------------------------------------------------------------------------------------


# (1) run calculations on an entire system ("supermolecular" reference):
# ----------------------------------------------------------------------

r_tot  = adfsinglepointjob(m_tot,  basis_set, settings=settings, options=gen_sym_opts).run()
agrid = adfgrid(r_tot)

results_tot_iso_super, results_tot_aniso_super \
= calculate_nmr_shieldings(m_tot, r_tot, active_atoms=super_nmr_atoms_index,  active_labels=super_nmr_atoms_label, active_coords=super_nmr_atoms_coords, label="supermolecule", print_to_output=True)

for i, ind in enumerate(super_nmr_atoms_index):

    nuc = super_nmr_atoms_label[i]
    coords = m_tot.get_coordinates()[ind-1]
    x = str(coords[0])
    y = str(coords[1])
    z = str(coords[2])
    k = x+", "+y+", "+z

    r1 = results_tot_iso_super[k]
    r2 = results_tot_aniso_super[k]
    print("The isotropic shielding of nucleus {} placed at {} from supermolecular calculations is {:.3f}".format(nuc,k,r1))
    print("The anisotropic shielding of nucleus {} placed at {} from supermolecular calculations is {:.3f}".format(nuc,k,r2))


# -------------------------------------------------------------------------
# FnT calculations
# Note:  these calculations are done on 'full' 
# supermolecular grids (option 'FULLGRID');
# This can be expensive for large systems, so
# we skip the evaluation of BSSE corrections
# (we can use the estimates done for supermolecular-isolated calculations)
# -------------------------------------------------------------------------


# (2) evaluate NMR of C and N (nuclei in "active_nmr_atoms"):
# -----------------------------------------------------------

# here, we do the calculations on the following subsystems:
# * active = m_mol
# * frozen = m_h2o + m_env

# if not done before, we need to prepare a frozen environment first:
r_allenv = adfsinglepointjob(m_h2o+m_env, basis_set, settings=settings, options=gen_sym_opts).run()

frags = [ fragment(None,  [m_mol]), 
          fragment(r_allenv, [m_h2o+m_env], isfrozen=True, fdeoptions=fnt_frz_opts) ]

r_mol_with_frozen_allenv = adffragmentsjob(frags, basis_set, settings=settings, fde=fnt_act_opts, options=gen_fde_opts).run()

r1_iso, r1_aniso \
= calculate_nmr_shieldings(frags, r_mol_with_frozen_allenv, active_atoms=active_nmr_atoms_index, active_labels=active_nmr_atoms_label, active_coords=active_nmr_atoms_coords, label="FDE: active=mol, frozen=allenv", print_to_output=True)

# the contribution from frozen = m_h2o + m_env is NICS-like, and we can evaluate it as follows:
# notes:
# - m_h2o + m_env is kept as frozen, so we calculate it as for an "isolated m_h2o + m_env" subsystem
# - we add point charges in positions of active_nmr_atoms_coords, as these are not present in m_h2o+m_env
r_allenv_pc = adfsinglepointjob(m_h2o+m_env, basis_set, settings=settings, options=gen_sym_opts, pointcharges=active_nmr_atoms_coords).run()
r2_iso, r2_aniso \
= calculate_nmr_shieldings(m_h2o+m_env, r_allenv_pc, active_atoms=[], active_labels=[], active_coords=[], ghost_coords=active_nmr_atoms_coords, ghost_labels=active_nmr_atoms_label, label="FnT-optimized allenv: NICS-like contribution from allenv to mol", print_to_output=True)

for i, ind in enumerate(active_nmr_atoms_index):

    nuc = active_nmr_atoms_label[i]
    coords = m_mol.get_coordinates()[ind-1]
    x = str(coords[0])
    y = str(coords[1])
    z = str(coords[2])
    k = x+", "+y+", "+z

    r1 = r1_iso[k]
    r2 = r2_iso[k]
    print("The isotropic shielding of nucleus {} placed at {} from FnT calculations on sub1(mol) with allenv kept as frozen is {:.3f}".format(nuc,k,r1))
    print("The isotropic shielding of nucleus {} placed at {} from FnT calculations on frozen sub2(allenv) - NICS-type contribution to sub1 -  is {:.3f}".format(nuc,k,r2))
    print("The total isotropic shielding of nucleus {} placed at {} estimated as a sum of FnT results for subsystems is {:.3f}".format(nuc,k,r1+r2))

    r1 = r1_aniso[k]
    r2 = r2_aniso[k]
    print("The anisotropic shielding of nucleus {} placed at {} from FDE calculations on sub1(mol) with allenv kept as frozen is {:.3f}".format(nuc,k,r1))
    print("The anisotropic shielding of nucleus {} placed at {} from calculations on frozen sub2(allenv) - NICS-type contribution to sub1 -  is {:.3f}".format(nuc,k,r2))
    print("The total anisotropic shielding of nucleus {} placed at {} estimated as a sum of FDE results for subsystems is {:.3f}".format(nuc,k,r1+r2))


    delta1 = results_tot_iso_super[k] - (r1_iso[k] + r2_iso[k])

    print("-------------------------------------------------------------------------")
    print("Solvent shifts evaluated for nuclei of active mol; environment is h2o+env")
    print("-------------------------------------------------------------------------")
    print("FnT solvent shift on the isotropic shielding of nucleus {} at {} is {:.3f}".format(nuc, k, delta1))
    print("\n")

    delta1 = results_tot_aniso_super[k] - (r1_aniso[k] + r2_aniso[k])

    print("FnT solvent shift on the anisotropic shielding of nucleus {} at {} is {:.3f}".format(nuc, k, delta1))
    print("\n")
 



# (3) evaluate NMR of Hb ("h2o_nmr_atoms")

# here, we do the calculations on the following subsystems:
# * active = m_h2o + m_env
# * frozen = m_mol

# if not done before, we need to prepare a frozen environment first:

r_mol  = adfsinglepointjob(m_mol,  basis_set, settings=settings, options=gen_sym_opts).run()

frags = [ fragment(None,  [m_h2o+m_env]), 
          fragment(r_mol, [m_mol], isfrozen=True, fdeoptions=fnt_frz_opts) ]

r_allenv_with_frozen_mol = adffragmentsjob(frags, basis_set, settings=settings, fde=fnt_act_opts, options=gen_fde_opts).run()

r1_iso, r1_aniso \
= calculate_nmr_shieldings(frags, r_allenv_with_frozen_mol, active_atoms=h2o_nmr_atoms_index, active_labels=h2o_nmr_atoms_label, active_coords=h2o_nmr_atoms_coords, ghost_coords=[], label="FDE: active=allenv, frozen=mol", print_to_output=True)

# the contribution from frozen = m_mol is as in an isolated system:
# notes:
# - we do not do "FDE" here, as in strict FDE, m_mol is now kept as frozen
# - we do not repeat calculations for r_mol - it is done above
r2_iso, r2_aniso \
= calculate_nmr_shieldings(m_mol, r_mol, active_atoms=[], active_labels=[], active_coords=[], ghost_coords=h2o_nmr_atoms_coords, label="FnT-optimized NICS-like contribution from mol to allenv", print_to_output=True)


for i, ind in enumerate(h2o_nmr_atoms_index):

    nuc = h2o_nmr_atoms_label[i]
    coords = m_h2o.get_coordinates()[ind-1]
    x = str(coords[0])
    y = str(coords[1])
    z = str(coords[2])
    k = x+", "+y+", "+z

    r1 = r1_iso[k]
    r2 = r2_iso[k]
    print("The isotropic shielding of nucleus {} placed at {} from FnT calculations on sub1(allenv) with mol kept as frozen is {:.3f}".format(nuc,k,r1))
    print("The isotropic shielding of nucleus {} placed at {} from FnT calculations on sub2(mol) - NICS-type contribution to sub1 -  is {:.3f}".format(nuc,k,r2))
    print("The total isotropic shielding of nucleus {} placed at {} estimated as a sum of FnT results for subsystems is {:.3f}".format(nuc,k,r1+r2))

    r1 = r1_aniso[k]
    r2 = r2_aniso[k]
    print("The anisotropic shielding of nucleus {} placed at {} from FnT calculations on sub1(allenv) with mol kept as frozen is {:.3f}".format(nuc,k,r1))
    print("The anisotropic shielding of nucleus {} placed at {} from FnT calculations on sub2(mol) - NICS-type contribution to sub1 -  is {:.3f}".format(nuc,k,r2))
    print("The total anisotropic shielding of nucleus {} placed at {} estimated as a sum of FnT results for subsystems is {:.3f}".format(nuc,k,r1+r2))


    delta1 = results_tot_iso_super[k] - (r1_iso[k] + r2_iso[k])

    print("------------------------------------------------------------------")
    print("Solvent shifts evaluated for nuclei of h2o+env; environment is mol")
    print("------------------------------------------------------------------")
    print("FnT solvent shift on the isotropic shielding of nucleus {} at {} is {:.3f}".format(nuc, k, delta1))
    print("\n")

    delta1 = results_tot_aniso_super[k] - (r1_aniso[k] + r2_aniso[k])

    print("FnT solvent shift on the anisotropic shielding of nucleus {} at {} is {:.3f}".format(nuc, k, delta1))
    print("\n")
 
