#
# This example shows how to calculate the NMR spin-spin coupling tensor in ADF via pyadf.
#
# last. rev. Gosia Olejniczak, 15/05/2024
#


import shutil
import time

from pyadf import *
if 'pyadfenv' not in globals():
    from pyadf.Initialization import *


##########################################################
# functions grepping key ADF results
##########################################################

def calculate_nmr_couplings(scf_results, perturbing_atoms=None, perturbing_labels=None, perturbing_coords=None, responding_atoms=None, responding_labels=None, responding_coords=None, label=None):

    print( " # " )
    print( " # Output from calculate_nmr_couplings:" )
    if label:
        print( " # ", label )
    print( " # " )


    cpl_settings = cplsettings()
    cpl_settings.set_operators(['fc', 'sd', 'dso', 'pso'])
    cpl_settings.set_atompert(perturbing_atoms)
    cpl_settings.set_atomresp(responding_atoms)

    cpl_results = adfcpljob(adfres=scf_results, settings=cpl_settings).run()

    all_j = cpl_results.get_all_couplings()
    all_k = cpl_results.get_all_couplings('K')
    for j, k in zip(all_j, all_k):
        line = ' J({:d},{:d}) = {:7.2f},   '.format(*j)
        line += ' K({:d},{:d}) = {:7.2f}'.format(*k)
        print(line)
    print('\n')

    print( " # -- end of calculate_nmr_couplings -- #" )



##########################################################
# the work starts here
##########################################################

# ----------------------
# setup - molecular data
# ----------------------

geometries_dir = pyadfenv.outdir
file_mol  = os.path.join(geometries_dir, 'an.xyz')
file_h2o  = os.path.join(geometries_dir, 'solvent0.xyz')
file_env1 = os.path.join(geometries_dir, 'solvent1.xyz')
file_env2 = os.path.join(geometries_dir, 'solvent2.xyz')
file_env3 = os.path.join(geometries_dir, 'solvent3.xyz')
m_mol  = molecule(file_mol)
m_h2o  = molecule(file_h2o)
m_env1 = molecule(file_env1)
m_env2 = molecule(file_env2)
m_env3 = molecule(file_env3)
# you can "group" molecules into subsystems, for instance:
# * group "m_envX" molecules into "m_env":
m_e = []
for i in range(1,4):
    m = molecule(os.path.join(geometries_dir, f'solvent{i:d}.xyz'))
    m_e.append(m)
m_env = sum(m_e)
# * and entire supermolecule:
m_tot = m_mol + m_h2o + m_env1 + m_env2 + m_env3
# * and entire solvent:
m_allenv = m_h2o + m_env1 + m_env2 + m_env3

# if a system is charged, then remember to set it up 
#charge_mol=0
#m_mol.set_charge(charge_mol)
#m_tot.set_charge(charge_mol)

# ask the program not to identify molecular symmetry
m_mol.set_symmetry('NOSYM')
m_h2o.set_symmetry('NOSYM')
m_env1.set_symmetry('NOSYM')
m_env2.set_symmetry('NOSYM')
m_env3.set_symmetry('NOSYM')
m_env.set_symmetry('NOSYM')
m_allenv.set_symmetry('NOSYM')
m_tot.set_symmetry('NOSYM')

print('Coordinates of all (sub)systems:')
print('mol:')
print(m_mol.print_coordinates())
print('h2o:')
print(m_h2o.print_coordinates())
print('env1:')
print(m_env1.print_coordinates())
print('env2:')
print(m_env2.print_coordinates())
print('env3:')
print(m_env3.print_coordinates())
print('entire environment:')
print((m_allenv).print_coordinates())
print('entire system:')
print(m_tot.print_coordinates())


# ------------------------------------------------------------------------------------------------
# setup - general settings for ADF job
#
# - adapt these as needed;
# - search in pyadf code to find out what they mean 
# - setup related to ADF-NMR job is done in calculate_nmr_couplings function
# ------------------------------------------------------------------------------------------------

settings = adfsettings()

settings.set_ZORA(ZORA=True, SpinOrbit=False)
settings.set_unrestricted(False)
settings.set_functional('PBE')                 # choose DFT functional
# note the use of specific basis sets - adapted for NMR spin-spin couplings
# this we need to use for the subsystem including the nuclei for which we calculate the couplings
# other subsystems can be described with different basis sets,
# but, since we want to compare with supermolecular results, we keep it for all subsystems:
basis_set = "TZ2P-J"                           # choose the basis set

# these settings can be left as they are:
settings.ncycles=1000                     
settings.set_integration(accint=8.0, acclist=[8.0, 8.0])
settings.set_dependency(True)
settings.set_exactdensity(True)
settings.set_save_tapes([21,10,41])
settings.set_occupations(['KEEPORBITALS '+str(settings.ncycles)])
gen_sym_opts = ['NOSYM', 'NOSYMFIT', 'NUCLEARMODEL gaussian']


# general settings for FDE - adapt as needed
fde_nadd_kin = 'PW91K'    # choose the potential for the non-additive kinetic part of interaction energy
max_fnt_cycles = 10       # choose the maximum number of freeze-and-thaw cycles
save_potentials_densities = False

fde_exc_opts = ['QTENS', 'ALLOW POSHOMO']
gen_fde_opts = gen_sym_opts + fde_exc_opts

fde_act_opts = {'FULLGRID':'', 'TNAD':fde_nadd_kin, 'ENERGY':''}
fde_frz_opts = {}

fnt_act_opts = {'FULLGRID':'', 'TNAD':fde_nadd_kin, 'ENERGY':'', 'RELAXCYCLES': max_fnt_cycles }
fnt_frz_opts = {"RELAX":""}

basis_act = basis_set
basis_frz = basis_set


# ------------------------------------------------------------------------------------------------
# setup - selection of the NMR centers
#     here, the nuclear indices are given in an INPUT order (as in the respective xyz files)
#     and atom numbering starts from 1
# ------------------------------------------------------------------------------------------------

# select nuclei in an active subsystem
# here - we select C and N
active_nmr_atoms_index = [1,2]
active_nmr_atoms_label = ["C","N"]
active_nmr_atoms_coords= []
for i in active_nmr_atoms_index:
    active_nmr_atoms_coords.append(m_mol.get_coordinates()[i-1])

# select nuclei in an environment;
# here - we select H in "m_h2o" engaged in a hydrogen bonding with N in "m_mol"
h2o_nmr_atoms_index = [3]
h2o_nmr_atoms_label = ["Hb"]
h2o_nmr_atoms_coords= []
for i in h2o_nmr_atoms_index:
    h2o_nmr_atoms_coords.append(m_h2o.get_coordinates()[i-1])
# we have no interest in nuclei of env, so we leave these empty:
env_nmr_atoms_index = []
env_nmr_atoms_label = []
env_nmr_atoms_coords= []
for i in env_nmr_atoms_index:
    env_nmr_atoms_coords.append(m_env.get_coordinates()[i-1])

# in a supermolecule, these nuclei have indices 1,2,9
# as in this example, we construct "m_tot" as (in order) "m_mol" (first) + "m_h2o" (second) + "m_env1" (third) ... 
super_nmr_atoms_index = [1,2,9]
super_nmr_atoms_label = ["C", "N", "Hb"]
super_nmr_atoms_coords= []
for i in super_nmr_atoms_index:
    super_nmr_atoms_coords.append(m_tot.get_coordinates()[i-1])


# -----------------------------------------------------------------
# now,  we demonstrate how to calculate the NMR spin-spin couplings
# -----------------------------------------------------------------


# (1) we calculate the couplings between C-N in the same subsystem
# ----------------------------------------------------------------
# we assume the following subsystems:
# * active = m_mol
# * frozen = m_h2o + m_env

# if not done before, we need to prepare a frozen environment first:
r_allenv = adfsinglepointjob(m_h2o+m_env, basis_set, settings=settings, options=gen_sym_opts).run()

frags = [ fragment(None,  [m_mol]), 
          fragment(r_allenv, [m_h2o+m_env], isfrozen=True, fdeoptions=fde_frz_opts) ]

r_mol_with_frozen_allenv = adffragmentsjob(frags, basis_set, settings=settings, fde=fde_act_opts, options=gen_fde_opts).run()

# let's calculate the couplings between C-N in the same subsystem

calculate_nmr_couplings(r_mol_with_frozen_allenv, perturbing_atoms=[1], perturbing_labels=["C"], responding_atoms=[2], responding_labels=["N"], label="FDE:active=mol, frozen=allenv") 


