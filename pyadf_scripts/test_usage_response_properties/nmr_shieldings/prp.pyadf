import shutil
import time

##########################################################
# functions grepping key ADF results
##########################################################

def calculate_nmr_shieldings(molecule, results, active_atoms=None, active_labels=None, label=None, ghost_coords=None, ghost_labels=None, print_active=False):

    print( " # " )
    print( " # Output from calculate_nmr_shieldings:" )
    if label:
        print( " # ", label )
    print( " # " )

    if ghost_coords is None:
        #nmr_results = adfnmrjob(results, active_atoms, out='all', use='FXC').run()
        nmr_results = adfnmrjob(results, active_atoms, out='tens').run()
    else:
        print(ghost_coords)
        #nmr_results = adfnmrjob(results, active_atoms, ghosts=ghost_coords, out='all', use='FXC').run()
        nmr_results = adfnmrjob(results, active_atoms, ghosts=ghost_coords, out='tens').run()

    if active_atoms is not None:
        print( "active atoms: ", active_atoms )
        if print_active:
            for a in range(len(active_atoms)):
                tot,para,dia = nmr_results.get_shielding(nuc=active_atoms[a])
                print( "@@ Shielding_iso_para  "+active_labels[a]+"("+label+") :", para )
                print( "@@ Shielding_iso_dia   "+active_labels[a]+"("+label+") :", dia )
                print( "@@ Shielding_iso_total "+active_labels[a]+"("+label+") :", tot )
                print( "\n" )


    if  ghost_coords is not None:
        print( "\n ghosts \n" )
        for g in range(len(ghost_labels)):
            cx = str(ghost_coords[g][0])
            cy = str(ghost_coords[g][1])
            cz = str(ghost_coords[g][2])
            print( "\nghost: "+ghost_labels[g]+" ("+label+"), at coords: "+cx+", "+cy+", "+cz+"\n" )
            tot,para,dia = nmr_results.get_shielding(ghost=g)
            print( "## Shielding_iso_para  : ghost "+ghost_labels[g]+" ("+label+") :", para )
            print( "## Shielding_iso_dia   : ghost "+ghost_labels[g]+" ("+label+") :", dia )
            print( "## Shielding_iso_total : ghost "+ghost_labels[g]+" ("+label+") :", tot )
            print( "\n" )

    print( " # -- end of calculate_nmr_shieldings -- #" )



##########################################################
# if you need to store large data, 
# please use a directory in $PLG_GROUPS_STORAGE/plggqcembed/
##########################################################

# adapt this to your needs, 
# but do not change the "/net/pr2/projects/plgrid/plggqcembed/" core:
data_dir='/net/pr2/projects/plgrid/plggqcembed/gosia-storage/pyadf/tests/pyadf_scripts/test_usage_response_properties/nmr_shieldings'


##########################################################
# general settings for pyadf on Ares;
# you do not need to change this
##########################################################

from pyadf import *
if 'pyadfenv' not in globals():
    from pyadf.Initialization import *

DefaultJobRunner.instance = None
job_runner_conf = JobRunnerConfiguration(conffile='/net/pr2/projects/plgrid/plggqcembed/devel/tools/pyadf-jobrunner.conf',
                                         jobbasedir=pyadfenv.outdir)
DefaultJobRunner(conf=job_runner_conf)



##########################################################
# 1. set up molecular data
##########################################################

# these settings you need to adapt for the job
# molecular data:
geometries_dir = os.path.join(pyadfenv.outdir, 'coordinates')
file_mol  = os.path.join(geometries_dir, 'fminus.xyz')
file_env1 = os.path.join(geometries_dir, 'h2o.xyz')
m_mol  = molecule(file_mol)
m_env1 = molecule(file_env1)
m_tot = m_mol + m_env1

# if a system is charged, then remember to set it up 
charge_mol=-1
m_mol.set_charge(charge_mol)
m_tot.set_charge(charge_mol)

# ask the program not to identify molecular symmetry
m_mol.set_symmetry('NOSYM')
m_env1.set_symmetry('NOSYM')
m_tot.set_symmetry('NOSYM')

print(m_mol.print_coordinates())

##########################################################
# 2. general settings for ADF job
##########################################################

settings = adfsettings()

# these settings you need to adapt for the job - search in ADF manual for possible options:
settings.set_ZORA(ZORA=True, SpinOrbit=False)  # choose the Hamiltonian
settings.set_unrestricted(False)               # ... option related to the Hamiltonian
settings.set_noncollinear(False)               # ... option related to the Hamiltonian
settings.set_functional('PBE')                 # choose DFT functional
basis_set = "DZP"                              # choose the basis set

# these settings can be left as they are:
# search in pyadf code what they mean 
settings.ncycles=1000                     
settings.set_integration(accint=8.0, acclist=[8.0, 8.0])
settings.set_dependency(True)
settings.set_exactdensity(True)
settings.set_save_tapes([21,10,41])
settings.set_occupations(['KEEPORBITALS '+str(settings.ncycles)])
gen_sym_opts = ['NOSYM', 'NOSYMFIT', 'NUCLEARMODEL gaussian']


##########################################################
# 3. run SCF
# - get optimized wavefunction
# - save numerical grid
# Note: you (almost) always need to run this
##########################################################

# if you verified all settings from points 1. and 2., then you don't need to change this
# SCF of a full system
r_tot  = adfsinglepointjob(m_tot,  basis_set, settings=settings, options=gen_sym_opts).run()
# SCF of isolated subsystems
r_mol  = adfsinglepointjob(m_mol,  basis_set, settings=settings, options=gen_sym_opts).run()
r_env1 = adfsinglepointjob(m_env1, basis_set, settings=settings, options=gen_sym_opts).run()



##########################################################
# 4. get numerical grid for a full system
##########################################################

# these settings you need to adapt for the job - storage and grid settings:
if not os.path.exists(data_dir):
    os.makedirs(data_dir)

agrid = adfgrid(r_tot)


##########################################################
# 5. Run property calculation
##########################################################

# NMR centers setup
# if we are interested in the NMR shielding of a specific nucleus,
# we can set it up here;
# * it can reduce the computational time, otherwise the code does calculations on all nuclei in a system (so it will matter for large systems)
# * but then - be wary of the numbering order of atoms

active_nmr_atoms_index = [1]
active_nmr_atoms_label = ["F"]
env_nmr_atoms_index = []
env_nmr_atoms_label = []
super_nmr_atoms_index = [1]
super_nmr_atoms_label = ["F"]


# NMR of a selected nuclei - here: of F- in an isolated subsystem (no FDE)
#calculate_nmr_shieldings(m_mol, r_mol, active_atoms=active_nmr_atoms_index, active_labels=active_nmr_atoms_label, label="isolated sub1", print_active=True)

# contributions to NMR of F- from ghost atoms of environment (NICS-type contributions to NMR shieldings)
ghost_coords_env = m_env1.get_coordinates()
ghost_labels_env = m_env1.get_atom_symbols()

#calculate_nmr_shieldings(m_env1, r_env1, active_atoms=env_nmr_atoms_index, active_labels=env_nmr_atoms_label, ghost_coords=ghost_coords_env, ghost_labels=ghost_labels_env, label="NICS-like contribution from env1 to isolated sub1", print_active=True)
calculate_nmr_shieldings(m_mol, r_mol, active_atoms=active_nmr_atoms_index, active_labels=active_nmr_atoms_label, ghost_coords=ghost_coords_env, ghost_labels=ghost_labels_env, label="NICS-like contribution from env1 to isolated sub1", print_active=True)

# NMR on selected nuclei - in a full system ("supermolecular" reference)
#calculate_nmr_shieldings(m_tot, r_tot, active_atoms=super_nmr_atoms_index,  active_labels=super_nmr_atoms_label, label="supermolecule", print_active=True)




